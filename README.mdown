#MKStoreKit

This is version 6.0 beta 1 of MKStoreKit. iOS 7+ only. 
MKStoreKit 6 is a **complete revamp** is not API compatible with previous versions of MKStoreKit. Refactoring should however be fairly simple.

*The code base is still in early beta. Use with caution*

The source code contains just three files, MKStoreKit.h/m and MKStoreKitConfigs.plist
The MKStoreKit is a singleton class that takes care of *everything*. Just drag these four files into the project. You then have to initialize it by calling [[MKStoreKit sharedKit] startProductRequest] in your application:didFinishLaunchingWithOptions. From then on, it does the magic. The MKStoreKit purchases, remembers and even handles remote validation of auto-renewable subscriptions.

## Features
* Super simple in app purchasing
* Built-in support for remembering your purchases
* Built-in receipt validation (remote)
* Built-in virtual currency manager

## Sample Code 

It's close to impossible to maintain a working sample code for MKStoreKit as iTunes connect deletes/deactivates un-submitted apps after 90 days. I'll instead be updating code snippets here.

###Config File Format
MKStoreKit uses a config file, MKStoreKitConfigs.plist for managing your product identifiers.
The config file is a Plist dictionary containing three keys, "Consumables", "Others" and "SharedSecret"

Consumables is the key where you provide a list of consumables in your app that should be managed as a virtual currency.
Others is the key where you provide a list of in app purchasable products
SharedSecret is the key where you provide the shared secret generated on your iTunesConnect account.

###Initialization

Initialization is as simple as calling

``` objective-c
[[MKStoreKit sharedKit] startProductRequest]
```

A sample initialziation code that you can add to your application:didFinishLaunchingWithOptions: is below

``` objective-c
  [[MKStoreKit sharedKit] startProductRequest];
  
  [[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductsAvailableNotification
                                                    object:nil
                                                     queue:[[NSOperationQueue alloc] init]
                                                usingBlock:^(NSNotification *note) {
    
    NSLog(@"Products available: %@", [[MKStoreKit sharedKit] availableProducts]);
  }];
  
  
  [[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductPurchasedNotification
                                                    object:nil
                                                     queue:[[NSOperationQueue alloc] init]
                                                usingBlock:^(NSNotification *note) {
                                                  
                                                  NSLog(@"Purchased/Subscribed to product with id: %@", [note object]);
                                                }];
  
  [[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitRestoredPurchasesNotification
                                                    object:nil
                                                     queue:[[NSOperationQueue alloc] init]
                                                usingBlock:^(NSNotification *note) {
                                                  
                                                  NSLog(@"Restored Purchases");
                                                }];
  
  [[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitRestoringPurchasesFailedNotification
                                                    object:nil
                                                     queue:[[NSOperationQueue alloc] init]
                                                usingBlock:^(NSNotification *note) {
                                                  
                                                  NSLog(@"Failed restoring purchases with error: %@", [note object]);
                                                }];
```

###Checking Product Status
You can check if a product was previously purchased using -isProductPurchased as shown below.
``` objective-c
if([[MKStoreKit sharedKit] isProductPurchased:productIdentifier]) {
//unlock it
}
```

You can check for a product's expiry date using -expiryDateForProduct as shown below.
``` objective-c
if([[MKStoreKit sharedKit] expiryDateForProduct:productIdentifier]) {
//unlock it
}
```

Warning: This method will return []NSNull null] for products that are not auto-renewing subscriptions.


###Making a Purchase
To purchase a feature or to subscribe to a auto-renewing subscription, just call

``` objective-c
[[MKStoreKit sharedKit] initiatePaymentRequestForProductWithIdentifier:productIdentifier];
```

Observe kMKStoreKitProductPurchasedNotification to get notified when the purchase completes

``` objective-c

  [[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductPurchasedNotification
                                                    object:nil
                                                     queue:[[NSOperationQueue alloc] init]
                                                usingBlock:^(NSNotification *note) {
                                                  
                                                  NSLog(@"Purchased/Subscribed to product with id: %@", [note object]);
                                                  
                                                  NSLog(@"%@", [[MKStoreKit sharedKit] valueForKey:@"purchaseRecord"]);
                                                }];
```

It can't get simpler than this!


## Missing Features

* Dynamically adding products to MKStoreKit from a remote resource
* Keychain support for products
* Support for hosted content
* Local receipt verification using asn1c
* Support for iOS 8's "Ask to buy" (SKPaymentTransactionStateDeferred)

## Untested Features

* Non-renewing subscriptions
* Free subscriptions for news stand
* Mac OS X support


These three features might work, but they are not tested yet.


###Licensing

MKStoreKit is licensed under MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---
###Attribution free licensing
In case you need attribution free licensing for MKNetworkKit, you can buy one from [my license store](http://blog.mugunthkumar.com/license-store/).
