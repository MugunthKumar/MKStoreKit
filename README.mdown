#MKStoreKit

An in-App Purchase framework for iOS 7.0+. **MKStoreKit** makes in-App Purchasing super simple by remembering your purchases, validating reciepts, and tracking virtual currencies (consumable purchases). Additionally, it keeps track of auto-renewable subscriptions and their expirationd dates. It couldn't be easier!

## Compatibility
See the table below for details on MKStoreKit's requirements and compatibility.

| Version | Stage  | Backwards Compatibility | iOS Version | OS X Version | Requires ARC |
|:-------:|:------:|:-----------------------:|:-----------:|:------------:|:------------:|
|   6.0   | Beta 1 | MKStoreKit Version 6.0  |  iOS 7.0 +  |    10.10 +   |      YES     |

MKStoreKit 6 is a **complete revamp** of the project and is not compatible with previous versions of MKStoreKit. Refactoring should however be fairly simple. See the *Backwards Compatibility* column to determine the earliest comaptible version with the current release.

*MKStoreKit 6 is still in early beta (see the Stage column). Use with caution*

## Setup
The source code contains just three files:
* `MKStoreKit.h`
* `MKStoreKit.m`
* `MKStoreKitConfigs.plist`

The MKStoreKit is a singleton class that takes care of *everything*. 

Just drag these three files into the project. 

You then have to initialize it by calling `[[MKStoreKit sharedKit] startProductRequest]` in your `application:didFinishLaunchingWithOptions`. From then on, it does the magic. The MKStoreKit purchases, remembers and even handles remote validation of auto-renewable subscriptions.

## Features
* Super simple in app purchasing
* Built-in support for remembering your purchases
* Built-in receipt validation (remote)
* Built-in virtual currency manager
* Support for iOS 8 Deferred Purchases, "Ask to Buy"
* Works on iOS and Mac OS X

## Sample Code 

It's close to impossible to maintain a working sample code for MKStoreKit as iTunes connect deletes/deactivates un-submitted apps after 90 days. I'll instead be updating code snippets here.

###Config File Format
MKStoreKit uses a config file, MKStoreKitConfigs.plist for managing your product identifiers.
The config file is a Plist dictionary containing three keys, "Consumables", "Subscriptions", "Others" and "SharedSecret"

Consumables is the key where you provide a list of consumables in your app that should be managed as a virtual currency.  
Subscriptions is the key where you provide a list of subscriptions and their durations.  
Others is the key where you provide a list of in app purchasable products.  
SharedSecret is the key where you provide the shared secret generated on your iTunesConnect account.

Here is a sample [MKStoreKitConfigs.plist](https://gist.github.com/MugunthKumar/330fc38b542c96fcecc6)


###Initialization

Initialization is as simple as calling

``` objective-c
[[MKStoreKit sharedKit] startProductRequest]
```

A sample initialziation code that you can add to your application:didFinishLaunchingWithOptions: is below

``` objective-c
[[MKStoreKit sharedKit] startProductRequest];
  
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductsAvailableNotification
                                                  object:nil
                                                   queue:[[NSOperationQueue alloc] init]
                                              usingBlock:^(NSNotification *note) {
    
                                                NSLog(@"Products available: %@", [[MKStoreKit sharedKit] availableProducts]);
                                              }];
  
  
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductPurchasedNotification
                                                  object:nil
                                                   queue:[[NSOperationQueue alloc] init]
                                              usingBlock:^(NSNotification *note) {
                                                  
                                                NSLog(@"Purchased/Subscribed to product with id: %@", [note object]);
                                              }];
  
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitRestoredPurchasesNotification
                                                  object:nil
                                                   queue:[[NSOperationQueue alloc] init]
                                              usingBlock:^(NSNotification *note) {
                                                  
                                                NSLog(@"Restored Purchases");
                                              }];
  
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitRestoringPurchasesFailedNotification
                                                  object:nil
                                                   queue:[[NSOperationQueue alloc] init]
                                              usingBlock:^(NSNotification *note) {
                                                  
                                                 NSLog(@"Failed restoring purchases with error: %@", [note object]);
                                              }];
```

###Checking Product Status
You can check if a product was previously purchased using -isProductPurchased as shown below.
``` objective-c
if ([[MKStoreKit sharedKit] isProductPurchased:productIdentifier]) {
        // Unlock it
}
```

You can check for a product's expiry date using -expiryDateForProduct as shown below.
``` objective-c
if ([[MKStoreKit sharedKit] expiryDateForProduct:productIdentifier]) {
        // Unlock it
}
```

Warning: This method will return []NSNull null] for products that are not auto-renewing subscriptions.


###Making a Purchase
To purchase a feature or to subscribe to a auto-renewing subscription, just call

``` objective-c
[[MKStoreKit sharedKit] initiatePaymentRequestForProductWithIdentifier:productIdentifier];
```

Observe kMKStoreKitProductPurchasedNotification to get notified when the purchase completes

``` objective-c
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductPurchasedNotification
                                                  object:nil
                                                   queue:[[NSOperationQueue alloc] init]
                                              usingBlock:^(NSNotification *note) {
                                                  
                                                  NSLog(@"Purchased/Subscribed to product with id: %@", [note object]);
                                                  
                                                  NSLog(@"%@", [[MKStoreKit sharedKit] valueForKey:@"purchaseRecord"]);
                                              }];
```

It can't get simpler than this!


## Missing Features

* Dynamically adding products to MKStoreKit from a remote resource
* Keychain support for products
* Support for hosted content
* Local receipt verification using ASN1C

## Untested Features

* Non-renewing subscriptions
* Free subscriptions for Newsstand

These two features might work, but they are not tested yet.

## Contributors 
 * [Sam Spencer](https://github.com/Sam-Spencer) for making MKStoreKit Mac compatible.
 
###Licensing

MKStoreKit is licensed under MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---
###Attribution free licensing
In case you need attribution free licensing for MKNetworkKit, you can buy one from [my license store](http://blog.mugunthkumar.com/license-store/).
